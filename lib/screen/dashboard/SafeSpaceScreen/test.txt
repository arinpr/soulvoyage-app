import 'package:flutter/material.dart';
import 'package:http/http.dart' as http; // HTTP package for API request
import 'dart:convert'; // For encoding request body
import 'package:smooth_page_indicator/smooth_page_indicator.dart';
class SafeSpaceScreen extends StatefulWidget {
  const SafeSpaceScreen({super.key});

  @override
  _SafeSpaceScreenState createState() => _SafeSpaceScreenState();
}

class _SafeSpaceScreenState extends State<SafeSpaceScreen> {
  final PageController _pageController = PageController(); // Controller for PageView
  int currentIndex = 0;

  // Controllers for each question
  final TextEditingController goalController = TextEditingController();
  final TextEditingController challengeController = TextEditingController();
  final TextEditingController safeController = TextEditingController();
  final TextEditingController gratefulController = TextEditingController();

  // List of questions and their respective controllers
  final List<String> questions = [
    "1. What is your goal for today?",
    "2. Describe a challenge you faced recently.",
    "3. What makes you feel safe?",
    "4. What are you grateful for today?"
  ];

  final List<TextEditingController> ansControllers = []; // Controllers list for questions

  @override
  void initState() {
    super.initState();
    // Initialize the controllers
    ansControllers.addAll([
      goalController,
      challengeController,
      safeController,
      gratefulController,
    ]);
  }

  @override
  void dispose() {
    // Dispose all controllers
    for (var controller in ansControllers) {
      controller.dispose();
    }
    super.dispose();
  }

  

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // PageView for horizontal carousel
            SizedBox(
              height: size.height * 0.67, // Height for the containers
              child: PageView.builder(
                controller: _pageController,
                onPageChanged: (index) {
                  setState(() {
                    currentIndex = index;
                  });
                },
                itemCount: questions.length, // Number of questions
                itemBuilder: (context, index) {
                  return Questions(
                    questionText: questions[index], // Pass question text dynamically
                    ansController: ansControllers[index], // Use the correct controller
                  );
                },
              ),
            ),
            
            const SizedBox(height: 20),

            // Page Indicator
            Center(
              child: SmoothPageIndicator(
                controller: _pageController, // PageController
                count: questions.length, // Number of dots
                effect: const ExpandingDotsEffect(
                  activeDotColor: Colors.blue, // Color for active dot
                  dotHeight: 8,
                  dotWidth: 8,
                  expansionFactor: 4, // Effect of active dot
                  spacing: 8, // Spacing between dots
                ),
              ),
            ),

            const SizedBox(height: 20),

            // Button at the bottom
            ElevatedButton(
              onPressed: () {
                // Get the text from the controllers and submit to API
                final String goal = goalController.text;
                final String challenge = challengeController.text;
                final String safe = safeController.text;
                final String grateful = gratefulController.text;

                // Print the collected data (for debugging)
                print("Goal: $goal");
                print("Challenge: $challenge");
                print("Safe: $safe");
                print("Grateful: $grateful");

                
              },
              child: const Text(
                "Submit",
                style: TextStyle(fontSize: 22),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class Questions extends StatelessWidget {
  final String questionText; // Question Text
  final TextEditingController ansController; // Controller for input

  const Questions({
    super.key,
    required this.questionText,
    required this.ansController,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 15, vertical: 12),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        boxShadow: const [
          BoxShadow(
            offset: Offset(1, 1),
            blurRadius: 10,
            spreadRadius: 2,
            color: Colors.black12,
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            width: double.infinity,
            decoration: const BoxDecoration(
              color: Colors.blue,
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(9), // Apply radius to top-left corner
                topRight: Radius.circular(9), // Apply radius to top-right corner
              ),
            ),
            child: Padding(
              padding: const EdgeInsets.all(18.0),
              child: Text(
                questionText, // Dynamic question text
                style: const TextStyle(fontSize: 20, color: Colors.white),
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(10.0),
            child: TextField(
              controller: ansController, // Use unique TextEditingController
              decoration: const InputDecoration(
                floatingLabelBehavior: FloatingLabelBehavior.always,
                labelText: 'Write here...', // Label for the text field
                border: OutlineInputBorder(),
              ),
              maxLines: 20, // For long input
              keyboardType: TextInputType.multiline,
            ),
          ),
        ],
      ),
    );
  }
}
