import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:intl/intl.dart'; // For formatting date
import 'package:soulvoyage/component/constatnt.dart';
import 'package:soulvoyage/screen/dashboard/EditScreen/EditScreen.dart';
import 'package:soulvoyage/screen/dashboard/Entries/openEntries/OpenEntries.dart';
import 'package:soulvoyage/screen/dashboard/Sidebar/Sidebar.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:shimmer/shimmer.dart';
import 'package:awesome_dialog/awesome_dialog.dart';

class Entries extends StatefulWidget {
  const Entries({super.key});

  @override
  State<Entries> createState() => _EntriesState();
}

class _EntriesState extends State<Entries> {
  DateTime? backPressTime;

  List<Map<String, dynamic>> diaryEntries = [];
  bool isLoading = true; // Flag to indicate loading

  // API fetching method
  Future<void> fetchDiaryEntries() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    final email = prefs.getString('email');
    final url = Uri.parse("$allEntries/$email");
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setState(() {
          diaryEntries = List<Map<String, dynamic>>.from(data.map((entry) => {
                "id": entry["id"],
                "title": entry["title"],
                "journalEntry": entry["journalEntry"],
                "modifiedDate": entry["modifiedDate"],
                "emotionAttached": entry["emotionAttached"]
              }));
          isLoading = false; // Stop loading
        });
      } else {
        Fluttertoast.showToast(
          msg: "Failed to fetch data",
          toastLength: Toast.LENGTH_SHORT,
          gravity: ToastGravity.BOTTOM,
        );
      }
    } catch (e) {
      Fluttertoast.showToast(
        msg: "Error occurred: $e",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
      );
    }
  }

  // Delete API method
  Future<void> deleteEntry(String id) async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  final token = prefs.getString('jwttoken');
  final url = Uri.parse('$deleteEntries/$id');
  try {
    final response = await http.delete(
      url,
      headers: {
        'Authorization': '$token', // Pass the Bearer token
        'Content-Type': 'application/json', // Ensure JSON content type
      },
    );
    if (response.statusCode == 200) {
      Fluttertoast.showToast(
        msg: "Entry deleted successfully",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
      );
      fetchDiaryEntries(); // Refresh the list after deletion
    } else {
      Fluttertoast.showToast(
        msg: "Failed to delete entry: ${response.statusCode}",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
      );
    }
  } catch (e) {
    Fluttertoast.showToast(
      msg: "An error occurred: $e",
      toastLength: Toast.LENGTH_SHORT,
      gravity: ToastGravity.BOTTOM,
      backgroundColor: Colors.red,
    );
  }
}


void showDeleteConfirmationDialog(id) {
    AwesomeDialog(
      context: context,
      dialogType: DialogType.warning,
      headerAnimationLoop: false,
      animType: AnimType.topSlide,
      title: 'Confirm Delete',
      desc: 'Are you sure you want to delete this entry?',
      btnCancelOnPress: () {},
      btnCancelColor: kTextColor,
      btnOkOnPress: () {
        deleteEntry(id);
      },
      btnOkText: "Delete",
      btnCancelText: "Cancel",
      btnOkColor: Colors.red,
    ).show();
  }

  // Emotion map
  Map<String, String> emotionMap = {
    "1": "üòû",
    "2": "üòê",
    "3": "üôÇ",
    "4": "üòÉ",
    "5": "üòä",
  };

  Future<bool> _onWillPop() async {
    final now = DateTime.now();
    if (backPressTime == null || now.difference(backPressTime!) > const Duration(seconds: 2)) {
      backPressTime = now;
      Fluttertoast.showToast(
        msg: "Press again to exit",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.black,
        textColor: Colors.white,
      );
      return false;
    }
    return true;
  }

  @override
  void initState() {
    super.initState();
    fetchDiaryEntries(); // Fetch data on initialization
  }

  @override
  Widget build(BuildContext context) {
    // ignore: deprecated_member_use
    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        appBar: AppBar(
          leading: IconButton(
            iconSize: 35,
            highlightColor: const Color.fromARGB(255, 199, 217, 234),
            onPressed: () {
              Get.to(() => const Sidebar());
            },
            icon: const Icon(Icons.menu_sharp),
          ),
          title: const Text(
            'SoulVoyage',
            style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold, color: kTextColor),
          ),
          centerTitle: true,
          backgroundColor: kPageColor, // Customize your app bar color
        ),
        backgroundColor: kPageColor,
        body: Column(
          children: [
            Container(height: 50,
            width: double.infinity,
            color: Colors.white,
            child: Row(
              children: [
                Text("Select Layout"),
                //by default is List View
                ElevatedButton(onPressed: (){}, child: const Text("List")),
                ElevatedButton(onPressed: (){}, child: const Text("Grid")),
              ],
            ),
            ),
            SingleChildScrollView(
              child: Padding(
                padding: const EdgeInsets.all(18.0),
                child: isLoading
                    ? _buildShimmerEffect() // Display shimmer effect while loading
                    : Column(
                        children: diaryEntries.map((entry) {
                          return _buildDiaryEntry(entry);
                        }).toList(),
                      ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Method to build shimmer effect
  Widget _buildShimmerEffect() {
    Size size = MediaQuery.of(context).size;
    return Column(
      children: List.generate(4, (index) {
        return Shimmer.fromColors(
          baseColor: Colors.grey[300]!,
          highlightColor: Colors.grey[100]!,
          child: Container(
            margin: const EdgeInsets.symmetric(vertical: 10),
            height: size.height * 0.15,
            width: double.infinity,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(10),
            ),
          ),
        );
      }),
    );
  }

  // Method to build each diary entry container
  Widget _buildDiaryEntry(Map<String, dynamic> entry) {
    Size size = MediaQuery.of(context).size;
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 10),
      height: size.height * 0.17,
      width: double.infinity,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        boxShadow: const [
          BoxShadow(
            offset: Offset(2, 2),
            blurRadius: 10,
            spreadRadius: 2,
            color: Colors.black12,
          )
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            // Left side: Title, Subtitle, and Date
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    entry['title'],
                    style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 18),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis, // Title will be truncated with ...
                  ),
                  const SizedBox(height: 5),
                  Padding(
                    padding: const EdgeInsets.only(right: 10),
                    child: Text(
                      entry['journalEntry'],
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis, // Subtitle truncated with ...
                      style: const TextStyle(fontSize: 14),
                    ),
                  ),
                  const SizedBox(height: 10),
                  Text(
                    _formatDate(entry['modifiedDate']),
                    style: const TextStyle(fontSize: 10),
                  ),
                ],
              ),
            ),
            // Right side: Emotion, Open button, and 3-dot menu
            Column(
              crossAxisAlignment: CrossAxisAlignment.end,
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    Text(emotionMap[entry['emotionAttached']] ?? ""),
                    PopupMenuButton<String>(
                      onSelected: (value) {
                        if (value == 'edit') {
                          Get.to(() => EditDiaryScreen(
                            id: entry['id'],
                            title: entry['title'],
                            journalEntry: entry['journalEntry'],
                          ));
                        } else if (value == 'delete') {
                          showDeleteConfirmationDialog(entry['id']); // Call delete method
                          // print(entry['id']);
                        }
                      },
                      itemBuilder: (BuildContext context) => [
                        const PopupMenuItem<String>(
                          value: 'edit',
                          child: Text('Edit'),
                        ),
                        const PopupMenuItem<String>(
                          value: 'delete',
                          child: Text('Delete'),
                        ),
                      ],
                      icon: const Icon(Icons.more_vert),
                    ),
                  ],
                ),
                ElevatedButton(
                  onPressed: () {
                    Get.to(() => Openentries(
                          title: entry['title'],
                          subTitle: entry['journalEntry'],
                          emotionAttached: entry['emotionAttached'],
                          id: entry['id'],
                        ));
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue, // Button background color
                    foregroundColor: Colors.white, // Text color
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10), // Border radius of 10
                    ),
                  ),
                  child: const Text('Open'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  // Helper method to format date
  String _formatDate(String isoDate) {
    final DateTime parsedDate = DateTime.parse(isoDate);
    return DateFormat('dd-MM-yyyy').format(parsedDate);
  }
}
