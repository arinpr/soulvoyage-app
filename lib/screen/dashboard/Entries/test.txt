import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:intl/intl.dart'; // For formatting date
import 'package:soulvoyage/component/constatnt.dart';
import 'package:soulvoyage/screen/dashboard/Sidebar/Sidebar.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:shimmer/shimmer.dart';

class Entries extends StatefulWidget {
  const Entries({super.key});

  @override
  State<Entries> createState() => _EntriesState();
}

class _EntriesState extends State<Entries> {
  DateTime? backPressTime;

  List<Map<String, dynamic>> diaryEntries = [];
  bool isLoading = true; // Flag to indicate loading
  final GlobalKey<AnimatedListState> _listKey = GlobalKey<AnimatedListState>(); // Animated list key

  // API fetching method
  Future<void> fetchDiaryEntries() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    final email = prefs.getString('email');
    final url = Uri.parse("$allEntries/$email");
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setState(() {
          diaryEntries = List<Map<String, dynamic>>.from(data.map((entry) => {
                "id": entry["id"],
                "title": entry["title"],
                "journalEntry": entry["journalEntry"],
                "modifiedDate": entry["modifiedDate"],
                "emotionAttached": entry["emotionAttached"]
              }));
          isLoading = false; // Stop loading
        });
      } else {
        Fluttertoast.showToast(
          msg: "Failed to fetch data",
          toastLength: Toast.LENGTH_SHORT,
          gravity: ToastGravity.BOTTOM,
        );
      }
    } catch (e) {
      Fluttertoast.showToast(
        msg: "Error occurred: $e",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
      );
    }
  }

  // Delete API method
  Future<void> deleteEntry(String id, int index) async {
    final url = Uri.parse('https://backend.soulvoyage.tech/deleteJournal/$id');
    try {
      final response = await http.delete(url);
      if (response.statusCode == 200) {
        Fluttertoast.showToast(
          msg: "Entry deleted successfully",
          toastLength: Toast.LENGTH_SHORT,
          gravity: ToastGravity.BOTTOM,
          backgroundColor: Colors.green,
        );
        removeEntryFromList(index); // Remove from the list with animation
      } else {
        Fluttertoast.showToast(
          msg: "Failed to delete entry: ${response.statusCode}",
          toastLength: Toast.LENGTH_SHORT,
          gravity: ToastGravity.BOTTOM,
          backgroundColor: Colors.red,
        );
      }
    } catch (e) {
      Fluttertoast.showToast(
        msg: "An error occurred: $e",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
      );
    }
  }

  // Method to remove entry from the list with animation
  void removeEntryFromList(int index) {
    final removedEntry = diaryEntries.removeAt(index);
    _listKey.currentState?.removeItem(
      index,
      (context, animation) => _buildDiaryEntry(removedEntry, animation, index),
      duration: const Duration(milliseconds: 600),
    );
  }

  // Emotion map
  Map<String, String> emotionMap = {
    "1": "üòû",
    "2": "üòê",
    "3": "üôÇ",
    "4": "üòÉ",
    "5": "üòä",
  };

  Future<bool> _onWillPop() async {
    final now = DateTime.now();
    if (backPressTime == null || now.difference(backPressTime!) > const Duration(seconds: 2)) {
      backPressTime = now;
      Fluttertoast.showToast(
        msg: "Press again to exit",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.black,
        textColor: Colors.white,
      );
      return false;
    }
    return true;
  }

  @override
  void initState() {
    super.initState();
    fetchDiaryEntries(); // Fetch data on initialization
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        appBar: AppBar(
          leading: IconButton(
            iconSize: 35,
            highlightColor: const Color.fromARGB(255, 199, 217, 234),
            onPressed: () {
              Get.to(() => const Sidebar());
            },
            icon: const Icon(Icons.menu_sharp),
          ),
          title: const Text(
            'SoulVoyage',
            style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold, color: kTextColor),
          ),
          centerTitle: true,
          backgroundColor: kPageColor, // Customize your app bar color
        ),
        backgroundColor: kPageColor,
        body: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(18.0),
            child: isLoading
                ? _buildShimmerEffect() // Display shimmer effect while loading
                : AnimatedList(
                    key: _listKey,
                    initialItemCount: diaryEntries.length,
                    itemBuilder: (context, index, animation) {
                      return _buildDiaryEntry(diaryEntries[index], animation, index);
                    },
                  ),
          ),
        ),
      ),
    );
  }

  // Method to build shimmer effect
  Widget _buildShimmerEffect() {
    Size size = MediaQuery.of(context).size;
    return Column(
      children: List.generate(5, (index) {
        return Shimmer.fromColors(
          baseColor: Colors.grey[300]!,
          highlightColor: Colors.grey[100]!,
          child: Container(
            margin: const EdgeInsets.symmetric(vertical: 10),
            height: size.height * 0.15,
            width: double.infinity,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(10),
            ),
          ),
        );
      }),
    );
  }

  // Method to build each diary entry container
  Widget _buildDiaryEntry(Map<String, dynamic> entry, Animation<double> animation, int index) {
    Size size = MediaQuery.of(context).size;
    return SizeTransition(
      sizeFactor: animation,
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 10),
        height: size.height * 0.15,
        width: double.infinity,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(10),
          boxShadow: const [
            BoxShadow(
              offset: Offset(2, 2),
              blurRadius: 10,
              spreadRadius: 2,
              color: Colors.black12,
            )
          ],
        ),
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              // Left side: Title, Subtitle, and Date
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      entry['title'],
                      style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 18),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis, // Title will be truncated with ...
                    ),
                    const SizedBox(height: 5),
                    Padding(
                      padding: const EdgeInsets.only(right: 10),
                      child: Text(
                        entry['journalEntry'],
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis, // Subtitle truncated with ...
                        style: const TextStyle(fontSize: 14),
                      ),
                    ),
                    const SizedBox(height: 10),
                    Text(
                      _formatDate(entry['modifiedDate']),
                      style: const TextStyle(fontSize: 10),
                    ),
                  ],
                ),
              ),
              // Right side: Emotion, Open button, and 3-dot menu
              Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Row(
                    children: [
                      Text(emotionMap[entry['emotionAttached']] ?? ""),
                      PopupMenuButton<String>(
                        onSelected: (value) {
                          if (value == 'edit') {
                            Fluttertoast.showToast(
                              msg: "Edit pressed for ${entry['title']}",
                              toastLength: Toast.LENGTH_SHORT,
                              gravity: ToastGravity.BOTTOM,
                            );
                          } else if (value == 'delete') {
                            deleteEntry(entry['id'], index); // Call delete method
                          }
                        },
                        itemBuilder: (BuildContext context) => [
                          const PopupMenuItem<String>(
                            value: 'edit',
                            child: Text('Edit'),
                          ),
                          const PopupMenuItem<String>(
                            value: 'delete',
                            child: Text('Delete'),
                          ),
                        ],
                        icon: const Icon(Icons.more_vert),
                      ),
                    ],
                  ),
                  ElevatedButton(
                    onPressed: () {
                      Fluttertoast.showToast(
                        msg: "Open pressed for ${entry['title']}",
                        toastLength: Toast.LENGTH_SHORT,
                        gravity: ToastGravity.BOTTOM,
                      );
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue, // Button background color
                      foregroundColor: Colors.white, // Text color
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10), // Border radius of 10
                      ),
                    ),
                    child: const Text('Open'),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Helper method to format date
  String _formatDate(String isoDate) {
    final DateTime parsedDate = DateTime.parse(isoDate);
    return DateFormat('dd-MM-yyyy').format(parsedDate);
  }
}
